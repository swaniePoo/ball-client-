package me.dinozoid.strife.module.implementations.exploit;

import me.dinozoid.strife.alpine.listener.EventHandler;
import me.dinozoid.strife.alpine.listener.Listener;
import me.dinozoid.strife.event.implementations.network.PacketOutboundEvent;
import me.dinozoid.strife.event.implementations.player.PlayerMotionEvent;
import me.dinozoid.strife.event.implementations.render.Render3DEvent;
import me.dinozoid.strife.module.Category;
import me.dinozoid.strife.module.Module;
import me.dinozoid.strife.module.ModuleInfo;
import me.dinozoid.strife.property.Property;
import me.dinozoid.strife.property.implementations.DoubleProperty;
import me.dinozoid.strife.util.network.PacketUtil;
import me.dinozoid.strife.util.render.RenderUtil;
import me.dinozoid.strife.util.system.TimerUtil;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.Vec3;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

@ModuleInfo(name = "Blink", renderName = "Blink", description = "Don't move on other people's screens.", category = Category.EXPLOIT)
public class BlinkModule extends Module {

    private final Property<Boolean> allPackets = new Property<Boolean>("All Packets",true);
    private final Property<Boolean> showPlayer = new Property<Boolean>("Show Player", false);
    private final ConcurrentLinkedQueue<Packet<?>> packets = new ConcurrentLinkedQueue<>();

    private final Property<Boolean> pulse = new Property<Boolean>("Pulse", false);
    private final DoubleProperty delayPulse = new DoubleProperty("Pulse Delay", 20, 1, 100, 0.1, pulse::getValue);
    private final Property<Boolean> randomisePulse = new Property<Boolean>("Randomise Pulse", false, pulse::getValue);

    private EntityOtherPlayerMP blinkEntity;

    List<Vec3> path = new ArrayList<>();


    @EventHandler
    private final Listener<PlayerMotionEvent> playerMotionEventListener = new Listener<>(event -> {
        if (mc.thePlayer.ticksExisted < 50) return;
        if(!event.isPre()) return;

        if (mc.thePlayer.lastTickPosX != mc.thePlayer.posX || mc.thePlayer.lastTickPosY != mc.thePlayer.posY || mc.thePlayer.lastTickPosZ != mc.thePlayer.posZ) {
            path.add(new Vec3(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ));
        }

        if (pulse.getValue()) {
            while (path.size() > delayPulse.getValue()) {
                path.remove(0);
            }
        }

        if (pulse.getValue() && blinkEntity != null) {
            mc.theWorld.removeEntityFromWorld(blinkEntity.getEntityId());
        }
    });

    @EventHandler
    private final Listener<Render3DEvent> render3DEventListener = new Listener<>(event -> {
        RenderUtil.renderBreadCrumbs(path);
    });

    @EventHandler
    private final Listener<PacketOutboundEvent> packetOutboundListener = new Listener<>(event -> {
        if (mc.thePlayer == null || mc.thePlayer.isDead || mc.isSingleplayer() || mc.thePlayer.ticksExisted < 50) {
            packets.clear();
            return;
        }

        if (allPackets.getValue()) {
            packets.add(event.getPacket());
            event.setCancelled(true);
        } else {
            if (event.getPacket() instanceof C03PacketPlayer) {
                packets.add(event.getPacket());
                event.setCancelled(true);
            }
        }

        if (pulse.getValue()) {
            if (!packets.isEmpty() && mc.thePlayer.ticksExisted % delayPulse.getValue().intValue() == 0 && Math.random() > 0.1) {
                packets.forEach(PacketUtil::sendPacketNoEvent);
                packets.clear();
            }
        }
    });

    @Override
    public void onDisable() {
        packets.forEach(PacketUtil::sendPacketNoEvent);
        packets.clear();

        if (showPlayer.getValue()) {
            if (blinkEntity != null) {
                mc.theWorld.removeEntityFromWorld(blinkEntity.getEntityId());
            }
        }
        super.onDisable();
    }

    @Override
    public void onEnable() {
        path.clear();

        if (!pulse.getValue() && showPlayer.getValue()) {
            blinkEntity = new EntityOtherPlayerMP(mc.theWorld, mc.thePlayer.getGameProfile());
            blinkEntity.setPositionAndRotation(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch);
            blinkEntity.rotationYawHead = mc.thePlayer.rotationYawHead;
            blinkEntity.setSprinting(mc.thePlayer.isSprinting());
            blinkEntity.setInvisible(mc.thePlayer.isInvisible());
            blinkEntity.setSneaking(mc.thePlayer.isSneaking());

            mc.theWorld.addEntityToWorld(blinkEntity.getEntityId(), blinkEntity);
        }
        super.onEnable();
    }
}
