package me.dinozoid.strife.module.implementations.exploit;

import io.netty.buffer.Unpooled;
import me.dinozoid.strife.Client;
import me.dinozoid.strife.alpine.event.EventState;
import me.dinozoid.strife.alpine.listener.EventHandler;
import me.dinozoid.strife.alpine.listener.Listener;
import me.dinozoid.strife.event.implementations.TeleportEvent;
import me.dinozoid.strife.event.implementations.network.PacketInboundEvent;
import me.dinozoid.strife.event.implementations.network.PacketOutboundEvent;
import me.dinozoid.strife.event.implementations.player.PlayerMotionEvent;
import me.dinozoid.strife.event.implementations.player.WorldLoadEvent;
import me.dinozoid.strife.module.Category;
import me.dinozoid.strife.module.Module;
import me.dinozoid.strife.module.ModuleInfo;
import me.dinozoid.strife.module.implementations.combat.KillAuraModule;
import me.dinozoid.strife.module.implementations.movement.AntiVoidModule;
import me.dinozoid.strife.module.implementations.movement.FlightModule;
import me.dinozoid.strife.module.implementations.movement.LongJumpModule;
import me.dinozoid.strife.module.implementations.player.ScaffoldModule;
import me.dinozoid.strife.property.implementations.EnumProperty;
import me.dinozoid.strife.ui.notification.Notification;
import me.dinozoid.strife.util.network.PacketUtil;
import me.dinozoid.strife.util.player.MovementUtil;
import me.dinozoid.strife.util.player.PlayerUtil;
import me.dinozoid.strife.util.system.MathUtil;
import me.dinozoid.strife.util.system.TimerUtil;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.init.Items;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.util.Vec3;

import java.sql.Time;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ThreadLocalRandom;

@ModuleInfo(name = "Disabler", renderName = "Disabler", description = "Disables anticheats.", category = Category.EXPLOIT)
public class DisablerModule extends Module {

    private final EnumProperty<DisablerMode> modeProperty = new EnumProperty("Mode", DisablerMode.HYPIXEL);
    private final Deque<TimestampedPacket> transactionQueue = new ArrayDeque<>();
    private final TimerUtil packetTimer = new TimerUtil();
    private final TimerUtil spikeTimer = new TimerUtil();
    public final List<Packet<?>> packet = new CopyOnWriteArrayList<>();
    private final TimerUtil timer = new TimerUtil();
    private long lastTransaction, lastPositionPacket;
    private final Queue<DelayedPacket> packetQueue = new ConcurrentLinkedQueue<>();
    private Vec3 initialPosition;
    private final List<IgnoredPosition> ignoredPositionList = new CopyOnWriteArrayList<>();
    private int lagbacks, balance;
    private final ConcurrentLinkedQueue<Packet<?>> packets = new ConcurrentLinkedQueue<>();
    //private final Stopwatch stopwatch = new Stopwatch();

    private long nextSend;
    private boolean spike;

    private KillAuraModule killAuraModule;
    private LongJumpModule longJumpModule;
    private ScaffoldModule scaffoldModule;
    private AntiVoidModule antiVoidModule;


    @EventHandler
    private final Listener<WorldLoadEvent> worldLoadEventListener = new Listener<>(event -> {
        transactionQueue.clear();
        lastTransaction = 0;
        ignoredPositionList.clear();
        packet.clear();
        packets.clear();
        nextSend = 0;
    });

    @EventHandler
    private final Listener<PlayerMotionEvent> motionEventListener = new Listener<>(event -> {
        switch (modeProperty.getValue()) {
            case HYPIXEL_NEW:{
//                if(event.isPre()){
//                    if (packet.size() > 50) {
//                        while (!packet.isEmpty()) {
//                            PacketUtil.sendPacketNoEvent(packet.remove(0));
//                        }
//                    }
//                }

                if(event.isUpdate()){
                    if(timer.hasElapsed(mc.thePlayer.ticksExisted < 100 ? 2500 : 450)){
                        while(!transactionQueue.isEmpty())
                        PacketUtil.sendPacketNoEvent(transactionQueue.removeLast().packet);

                        timer.reset();
                    }
                }
                break;
            }
            case HYPIXEL: {
//                if(mc.thePlayer.ticksExisted <= 5) return;
//                if (!event.isUpdate()) return;
//
//                if (lastTransaction > 0) return;
//
//                if (packetTimer.hasElapsed(mc.thePlayer.ticksExisted < 120 ? 1400 : MathUtil.randomLong(400, 450))) {
//                    while (!transactionQueue.isEmpty())
//                        mc.thePlayer.sendQueue.sendPacketNoEvent(transactionQueue.removeLast().packet);
//                    packetTimer.reset();
//                }
//                if (mc.thePlayer.ticksExisted == 120) {
//                    Client.INSTANCE.getNotificationRepository().display(new Notification(Notification.NotificationType.SUCCESS, "Disabler", "Sexy dinozoid go brrr"));
//                }
//                if (!event.isPre())
//                    return;
//                if (mc.theWorld == null )
//                    transactionQueue.clear();
//                if (lastTransaction > 0 || mc.thePlayer.ticksExisted <= 5)
//                    return;
//                if (packetTimer.hasElapsed(mc.thePlayer.ticksExisted < 120 ? (long) Math.round(Math.random() * 100000) : MathUtil.randomLong(50L, 200L))) {
//                    while (!transactionQueue.isEmpty())
//                        PacketUtil.sendPacketNoEvent(transactionQueue.removeLast().packet);
//                    packetTimer.reset();
//                    spike = false;
//                }
//                if (mc.thePlayer.ticksExisted == 120) {
//                    Client.INSTANCE.getNotificationRepository().display(new Notification(Notification.NotificationType.SUCCESS, "Disabler", "Sexy dinozoid go brrr"));
//                    event.setPosX(event.getPosX() + 1);
//                    event.setPosZ(event.getPosZ() + 1);
//                }
//                if (spikeTimer.hasElapsed(10000) && !longJumpModule.toggled() && !scaffoldModule.toggled() && !(antiVoidModule.toggled() && antiVoidModule.falling()) && !(killAuraModule.toggled() || killAuraModule.target() == null)) {
//                    spike = true;
//                    packetTimer.reset();
//                    spikeTimer.reset();
//                }
                break;
            }
            case BLOCKS_SHITTER: {
                if (timer.hasElapsed(490)) {
                    timer.reset();
                    if (!transactionQueue.isEmpty()) {
                        PacketUtil.sendPacketNoEvent(transactionQueue.poll().packet);
                    }
                }
                break;
            }
        }
    });

    @EventHandler
    private final Listener<PacketOutboundEvent> packetOutboundListener = new Listener<>(event -> {
        switch (modeProperty.getValue()) {
            case HYPIXEL_NEW: {
//                if ((event.getPacket() instanceof C00PacketKeepAlive) && mc.thePlayer.ticksExisted > 70) {
//                    packetQueue.add(new DelayedPacket(event.getPacket(), 320L));
//                    event.setCancelled(true);
//                }
//
//                if (event.getPacket() instanceof C0BPacketEntityAction)
//                    event.setCancelled(true);
//
//                if (event.getPacket() instanceof C03PacketPlayer) {
//                    if (mc.currentScreen instanceof GuiDownloadTerrain) {
//                        mc.displayGuiScreen(null);
//                    }
//                    PacketUtil.sendPacketNoEvent(new C0CPacketInput());
//                    C03PacketPlayer packetPlayer = event.getPacket();
//                    if (isIgnored(packetPlayer)) {
//                        packetPlayer.y += Math.random() * 1.0E-9;
//                    }
//                    for (DelayedPacket delayedPacket : packetQueue) {
//                        if (mc.thePlayer.ticksExisted % 8 == 0) {
//                            delayedPacket.endDelta -= 73;
//                        }
//                        if (System.currentTimeMillis() - delayedPacket.getStartTime() >= delayedPacket.getEndDelta()) {
//                            PacketUtil.sendPacketNoEvent(delayedPacket.getPacket());
//                            packetQueue.remove(delayedPacket);
//                        }
//                    }
//                }
                /*if (event.getPacket() instanceof C03PacketPlayer && mc.thePlayer.ticksExisted <= MathUtil.randomInt(5, 20)) {
                    C03PacketPlayer c03 = event.getPacket();
                    c03.setX(c03.getPositionX() + MathUtil.randomDouble(-MathUtil.randomDouble(1 - MovementUtil.getRandomHypixelValues(), 332 +
                            MovementUtil.getRandomHypixelValues()), MathUtil.randomDouble(1 - MovementUtil.getRandomHypixelValues(), 321 + MovementUtil.getRandomHypixelValues())));
                    c03.setY(c03.getPositionY() + MathUtil.randomDouble(-MathUtil.randomDouble(1 - MovementUtil.getRandomHypixelValues(), 311 +
                            MovementUtil.getRandomHypixelValues()), MathUtil.randomDouble(1 - MovementUtil.getRandomHypixelValues(), 321 + MovementUtil.getRandomHypixelValues())));
                    c03.setZ(c03.getPositionZ() + MathUtil.randomDouble(-MathUtil.randomDouble(1 - MovementUtil.getRandomHypixelValues(), 301 +
                            MovementUtil.getRandomHypixelValues()), MathUtil.randomDouble(1 - MovementUtil.getRandomHypixelValues(), 295 + MovementUtil.getRandomHypixelValues())));
//                    c03.setYaw(MathUtil.randomFloat(-180, 180));
//                    c03.setPitch(MathUtil.randomFloat(-90, 90));
                    c03.setOnGround(MathUtil.randomBoolean(mc.thePlayer.ticksExisted, MathUtil.randomDouble(6, 16)));
                    event.setPacket(c03);
                    PlayerUtil.sendMessage("sex");
                }*/


                if (event.getPacket() instanceof C03PacketPlayer) {
                    if(!(event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition || event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook || event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook)) {
                        C03PacketPlayer c03 = event.getPacket();
                        event.setCancelled((!c03.isMoving() && !c03.getRotating() && !mc.thePlayer.isUsingItem()) || mc.thePlayer.ticksExisted < 120);
                        if (mc.thePlayer.ticksExisted < 120) {
                            transactionQueue.push(new TimestampedPacket(c03));
                        }
                    }
                }

                if(mc.thePlayer.ticksExisted > 70) {
                    if ((event.getPacket() instanceof C00PacketKeepAlive)) {
                        lastTransaction++;
                        if (lastTransaction % 5 == 0) {
                            event.setCancelled(true);
                            transactionQueue.push(new TimestampedPacket(event.getPacket()));
                        }
                    }

                    if (event.getPacket() instanceof C0FPacketConfirmTransaction){
                        transactionQueue.push(new TimestampedPacket(event.getPacket()));
                        event.setCancelled(true);
                    }
                }

//                if(event.getPacket() instanceof C03PacketPlayer){
//                    C03PacketPlayer c03 = event.getPacket();
//                    event.setCancelled((!(mc.thePlayer.isSwingInProgress && mc.thePlayer.isUsingItem() || (c03.isMoving() && c03.getRotating()))) || mc.thePlayer.ticksExisted < 100);
//                    if(mc.thePlayer.ticksExisted < 100){
//                        transactionQueue.push(new TimestampedPacket(c03));
//                    }
//                }
//
//                if (event.getPacket()  instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
//                    if (mc.thePlayer.ticksExisted >= 100) {
//                        transactionQueue.push(new TimestampedPacket(event.getPacket()));
//                    }
//                    event.setCancelled(true);
//                }

//                if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) {
//                    packetQueue.clear();
//                    ignoredPositionList.clear();
//                }
//
//                if ((event.getPacket() instanceof C00PacketKeepAlive || event.getPacket() instanceof C0FPacketConfirmTransaction) && mc.thePlayer.ticksExisted > 70) {
//                    packetQueue.add(new DelayedPacket(event.getPacket(), 400L));
//                    event.setCancelled(true);
//                }
//
//                if (event.getPacket() instanceof C03PacketPlayer) {
//                    if (mc.currentScreen instanceof GuiDownloadTerrain) {
//                        mc.displayGuiScreen(null);
//                    }
//                    PacketUtil.sendPacketNoEvent(new C0CPacketInput());
//                    C03PacketPlayer packetPlayer = event.getPacket();
//                    if (isIgnored(packetPlayer)) {
//                        packetPlayer.y += Math.random() * 1.0e-9;
//                    }
//                    for (DelayedPacket delayedPacket : packetQueue) {
//                        if (mc.thePlayer.ticksExisted % 8 == 0) {
//                            delayedPacket.endDelta -= 73;
//                        }
//                        if (System.currentTimeMillis() - delayedPacket.getStartTime() >= delayedPacket.getEndDelta()) {
//                            PacketUtil.sendPacketNoEvent(delayedPacket.getPacket());
//                            packetQueue.remove(delayedPacket);
//                        }
//                    }
//                }

//                if(mc.thePlayer.ticksExisted <= 5) return;
//

//                if (event.getPacket() instanceof C03PacketPlayer) {
//                    final C03PacketPlayer wrapper = (C03PacketPlayer) event.getPacket();
//
//                    if (mc.thePlayer.ticksExisted == 1) {
//                        initialPosition = new Vec3(wrapper.x + MathUtil.randomDouble(-1000000, 1000000), wrapper.y + MathUtil.randomDouble(-1000000, 1000000), wrapper.z + MathUtil.randomDouble(-1000000, 1000000));
//                    } else if (mc.thePlayer.sendQueue.doneLoadingTerrain && initialPosition != null && mc.thePlayer.ticksExisted < 100) {
//                        wrapper.x = initialPosition.xCoord;
//                        wrapper.y = initialPosition.yCoord;
//                        wrapper.z = initialPosition.zCoord;
//                    }
//                }

//                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
//                    packet.add(event.getPacket());
//                    event.setCancelled(true);
//                }
//                if (event.getPacket() instanceof C00PacketKeepAlive) {
//                    lastTransaction++;
//                    if (lastTransaction % 3 == 0) {
//                        packet.add(event.getPacket());
//                        event.setCancelled(true);
//                    }
//                }
//                if(event.getPacket() instanceof C03PacketPlayer){
//                    if (mc.thePlayer.ticksExisted < 120) {
//                        transactionQueue.push(new TimestampedPacket(event.getPacket()));
//                        event.cancel();
//                    } else {
//                        if (lastTransaction > 0) {
//                            event.cancel();
//                            lastTransaction--;
//                            return;
//                        }
//                    }
//                }

//                if ((event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) && (mc.thePlayer.ticksExisted % 600 <= 3 || mc.thePlayer.ticksExisted < 20)) {
//                    PlayerUtil.sendMessageWithPrefix("yes");
//                    PacketUtil.sendPacketDelayedNoEvent(event.getPacket(), 400L);
//                    event.setCancelled(true);
//                }
                break;
            }
            case BLOCKS_SHITTER: {
                if (playerInLobby() || mc.thePlayer.ticksExisted < 5) {
                    timer.reset();
                    transactionQueue.clear();
                    return;
                }

                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    event.setCancelled(true);
                    transactionQueue.push(new TimestampedPacket(event.getPacket()));

                    if (transactionQueue.size() >= 265) {
                        //just as a warning for this idk if it causes silent flags as i havent been testing long enough
                        PacketUtil.sendPacketNoEvent(transactionQueue.poll().packet);
                    }
                }

                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    event.setCancelled(true);
                }

                if (event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03 = event.getPacket();

                    //credit to dort for this line (it allows spoof nofall)
                    mc.thePlayer.setPosition(mc.thePlayer.posX, Math.round(mc.thePlayer.posY / 0.015625) * 0.015625, mc.thePlayer.posZ);

                    if (mc.thePlayer.ticksExisted % 25 == 0) {
                        c03.setY(-0.015625); //this might be the only value as of now that actually works well (havent tested cuz ye)
                        c03.setOnGround(false);
                    }
                }
                break;
            }
            case HYPIXEL: {
//                TargetStrafeModule targetStrafeModule = TargetStrafeModule.instance();
//                if(event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook && (killAuraModule.target() != null && killAuraModule.toggled() && SpeedModule.instance().toggled())){
//                    C03PacketPlayer.C06PacketPlayerPosLook c06 = event.getPacket();
//                    c06.setYaw(targetStrafeModule.canStrafe() ? targetStrafeModule.getYawDifferenceToPoint(targetStrafeModule.currentPoint, mc.thePlayer) : MovementUtil.getMovementDirection());
//                }
                final Packet<?> p = event.getPacket();

                if (p instanceof C03PacketPlayer) {
                    if (mc.thePlayer.ticksExisted < 100) {
                        event.setCancelled(true);
                    }

                    if (timer.hasElapsed(nextSend)) {
                        while (!packets.isEmpty()) {
                            PacketUtil.sendPacketNoEvent(packets.poll());

                            nextSend = Math.round(MathUtil.randomLong(50, 150));
                            timer.reset();
                        }
                    }
                }

                if (p instanceof C03PacketPlayer && !mc.thePlayer.isSwingInProgress &&
                        !mc.thePlayer.isUsingItem() && !((C03PacketPlayer) p).isMoving()) {
                    event.setCancelled(true);
                }

                if (p instanceof C0FPacketConfirmTransaction || p instanceof C00PacketKeepAlive) {
                    if (mc.thePlayer.ticksExisted >= 100) {
                        packets.add(p);
                    }
                    event.setCancelled(true);
                }

                if (p instanceof C0BPacketEntityAction) {
                    final C0BPacketEntityAction wrapper = (C0BPacketEntityAction) p;

                    if (wrapper.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                        if (mc.thePlayer.serverSprintState) {
                            PacketUtil.sendPacketNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            mc.thePlayer.serverSprintState = false;
                        }
                        event.setCancelled(true);
                    }

                    if (wrapper.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING)) {
                        event.setCancelled(true);
                    }
                }

                break;
            }
        }
    });

    private boolean isIgnored(C03PacketPlayer packetPlayer) {
        for (IgnoredPosition ignoredPosition : ignoredPositionList) {
            if (ignoredPosition.getX() == packetPlayer.getPositionX() &&
                    ignoredPosition.getY() == packetPlayer.getPositionY() &&
                    ignoredPosition.getZ() == packetPlayer.getPositionZ()) {
                return true;
            }
        }
        return false;
    }


    @EventHandler
    private final Listener<TeleportEvent> teleportEventListener = new Listener<>(event -> {
        if(modeProperty.getValue() == DisablerMode.HYPIXEL_NEW){
            if (mc.thePlayer.sendQueue.doneLoadingTerrain) {
                ignoredPositionList.add(new IgnoredPosition(event.getPosX(), event.getPosY(), event.getPosZ()));
                if(ignoredPositionList.size() > 0) {
                    if (mc.thePlayer.ticksExisted < 120) {
                        for (int i = 0; i < 10; i++) {
                            PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(event.getPosX(), event.getPosY() + 1e-6, event.getPosZ(), false));
                        }

                        PacketUtil.sendPacketNoEvent(event.getResponse());

                        if (mc.thePlayer.getDistance(event.getPosX(), event.getPosY(), event.getPosZ()) <= 8) {
                            event.setCancelled(true);
                        }
                    } else {
                        event.setPosX(event.getPosX() + MathUtil.randomDouble(-10, 10));
                        event.setPosZ(event.getPosZ() + MathUtil.randomDouble(-10, 10));
                    }
                }
            }
        } else if(modeProperty.getValue() == DisablerMode.HYPIXEL){
            if (mc.thePlayer.sendQueue.doneLoadingTerrain) {
                event.setPosX(event.getPosX() + Double.MIN_VALUE);
                event.setPosZ(event.getPosZ() - Double.MIN_VALUE);
            }
        }
    });

    @EventHandler
    private final Listener<PacketInboundEvent> packetInboundListener = new Listener<>(event -> {
        switch (modeProperty.getValue()) {
            case HYPIXEL_NEW:{
                if(event.getPacket() instanceof S07PacketRespawn){
                    transactionQueue.clear();
                    timer.reset();
                }
//                if (event.getPacket() instanceof S08PacketPlayerPosLook && !FlightModule.instance().toggled()) {
//                    S08PacketPlayerPosLook packet = event.getPacket();
//                    mc.thePlayer.setPosition(packet.getX(), packet.getY(), packet.getZ());
//                    mc.thePlayer.motionX = 0;
//                    mc.thePlayer.motionY = 0;
//                    mc.thePlayer.motionZ = 0;
//                    if (mc.currentScreen instanceof GuiDownloadTerrain)
//                        mc.displayGuiScreen(null);
//                    mc.thePlayer.sendQueue.doneLoadingTerrain = true;
//                    ignoredPositionList.add(new IgnoredPosition(packet.getX(), packet.getY(), packet.getZ()));
//                   // if(ignoredPositionList.size() > 0) {
//                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(packet.getX(), packet.getY() + 1e-6, packet.getZ(), false));
//                        event.setCancelled(true);
//                    //}
//                }
//                if(mc.thePlayer.ticksExisted <= 5) return;
//                if(event.getPacket() instanceof S08PacketPlayerPosLook && mc.thePlayer.ticksExisted < 120 && mc.thePlayer.ticksExisted > 5){
//                    S08PacketPlayerPosLook s08 = event.getPacket();
//                    if(mc.thePlayer.getDistance(s08.getX(), s08.getY(), s08.getZ()) <= 8){
//                        event.setCancelled(true);
//                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(s08.getX(), s08.getY(), s08.getZ(), false));
//                    }
//                }
                break;
            }
            case HYPIXEL: {
//                if (event.getPacket() instanceof S08PacketPlayerPosLook) {
//
//                    if (mc.thePlayer.ticksExisted < 5 || !PlayerUtil.isBlockUnder() || mc.thePlayer.ticksExisted > 120)
//                        return;
//
//                    if (spikeTimer.hasElapsed(MathUtil.randomLong(500, 2000))) {
//                        lastTransaction = 6;
//                        event.setCancelled(true);
//                        spikeTimer.reset();
//                    }
//                }
                break;
            }
            case BLOCKS_SHITTER: {
                if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook s08 = event.getPacket();
                    if (mc.thePlayer.getDistance(s08.getX(), s08.getY(), s08.getZ()) <= 8) {
                        //dinkozoid told me to do this instead so if it doesnt work right u know who to complain to
                        event.setCancelled(true);
                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), true));
                    }
                }
                break;
            }
        }
    });

    public void directPacketRecieve(PacketInboundEvent event) {
        // used only for listeners without modules :)
        if (event.getPacket() instanceof S32PacketConfirmTransaction && mc.currentScreen instanceof GuiContainer) {
            ((GuiContainer) mc.currentScreen).onServerTransaction(event.getPacket());
        }
    }

    private final class TimestampedPacket {
        private final Packet<?> packet;
        private final long timestamp;

        public TimestampedPacket(final Packet<?> packet) {
            this.packet = packet;
            this.timestamp = System.currentTimeMillis();
        }
    }

    @Override
    public void onEnable() {
        super.onEnable();
        transactionQueue.clear();
        spike = false;
        timer.reset();
        packet.clear();
        packets.clear();
        nextSend = 0;
        ignoredPositionList.clear();
        lastTransaction = 0;
        lagbacks = balance = 0;
        if (killAuraModule == null)
            killAuraModule = KillAuraModule.instance();
        if (longJumpModule == null)
            longJumpModule = Client.INSTANCE.getModuleRepository().moduleBy(LongJumpModule.class);
        if (scaffoldModule == null)
            scaffoldModule = ScaffoldModule.getInstance();
        if (antiVoidModule == null)
            antiVoidModule = AntiVoidModule.instance();
    }

    public static DisablerModule instance() {
        return Client.INSTANCE.getModuleRepository().moduleBy(DisablerModule.class);
    }

    @Override
    public void onDisable() {
        super.onDisable();
    }

    public boolean playerInLobby() {
        return mc.thePlayer.inventory.hasItem(Items.compass);
    }

    @Override
    public void init() {
        super.init();
        addValueChangeListener(modeProperty, () -> modeProperty.getValue() != DisablerMode.AGC);
    }

    public EnumProperty<DisablerMode> modeProperty() {
        return modeProperty;
    }

    public enum DisablerMode {
        HYPIXEL, HYPIXEL_NEW, AGC, BLOCKS_SHITTER
    }

    private static final class DelayedPacket {
        private final long startTime = System.currentTimeMillis();
        private final Packet packet;
        private long endDelta;

        private DelayedPacket(Packet packet, long endDelta) {
            this.packet = packet;
            this.endDelta = endDelta;
        }

        public Packet getPacket() {
            return packet;
        }

        public long getEndDelta() {
            return endDelta;
        }

        public long getStartTime() {
            return startTime;
        }
    }

    private static final class IgnoredPosition {
        private final double x, y, z;

        private IgnoredPosition(double x, double y, double z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        public double getX() {
            return x;
        }

        public double getY() {
            return y;
        }

        public double getZ() {
            return z;
        }

    }
}