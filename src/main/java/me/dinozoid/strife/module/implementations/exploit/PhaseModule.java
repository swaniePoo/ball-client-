package me.dinozoid.strife.module.implementations.exploit;

import me.dinozoid.strife.Client;
import me.dinozoid.strife.alpine.listener.EventHandler;
import me.dinozoid.strife.alpine.listener.Listener;
import me.dinozoid.strife.event.implementations.player.BoundingBoxEvent;
import me.dinozoid.strife.event.implementations.player.MovePlayerEvent;
import me.dinozoid.strife.event.implementations.player.PushOutOfBlocksEvent;
import me.dinozoid.strife.module.Category;
import me.dinozoid.strife.module.Module;
import me.dinozoid.strife.module.ModuleInfo;
import me.dinozoid.strife.property.implementations.EnumProperty;
import me.dinozoid.strife.ui.notification.Notification;
import me.dinozoid.strife.util.network.PacketUtil;
import me.dinozoid.strife.util.player.MovementUtil;
import net.minecraft.network.play.client.C03PacketPlayer;

@ModuleInfo(name = "Phase", renderName = "Phase", description = "Go through blocks", category = Category.EXPLOIT)
public class PhaseModule extends Module {

    private final EnumProperty<PhaseMode> modeProperty = new EnumProperty("Phase", PhaseMode.HYPIXEL);
    @EventHandler
    private final Listener<MovePlayerEvent> movePlayerListener = new Listener<>(event -> {
        if (mc.gameSettings.keyBindSneak.isKeyDown()) {
            Client.INSTANCE.getNotificationRepository().display(new Notification(Notification.NotificationType.SUCCESS, "Phase", "Successfully vclipped.", 1500));
            mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - 3, mc.thePlayer.posZ);
            toggle();
        } else if (mc.gameSettings.keyBindSprint.isKeyDown()) {
            Client.INSTANCE.getNotificationRepository().display(new Notification(Notification.NotificationType.SUCCESS, "Phase", "Successfully vclipped.", 1500));
            mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3, mc.thePlayer.posZ);
            toggle();
        }
        switch (modeProperty.getValue()) {
            case HYPIXEL: {
                mc.timer.timerSpeed = 0.1f;
                if (mc.thePlayer.isCollidedHorizontally) {
                    for (int i = 0; i < 4; i++) {
                        double[] push = MovementUtil.yawPos(0.05);
                        PacketUtil.sendPacketNoEvent(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX + push[0], mc.thePlayer.posY, mc.thePlayer.posZ + push[1], mc.thePlayer.onGround));
                    }
                }
                if (MovementUtil.isInsideBlock()) {
                    double[] push = MovementUtil.yawPos(0.74);
                    event.setY(mc.thePlayer.motionY = 1.1E-2 * 1.3 + MovementUtil.getRandomHypixelValues());
                    mc.thePlayer.getEntityBoundingBox().offsetAndUpdate(push[0], 0, push[1]);
                }
                mc.timer.timerSpeed = 1f;
            }
            break;
        }
    });
    @EventHandler
    private final Listener<BoundingBoxEvent> boundingBoxListener = new Listener<>(event -> {
        if (mc.thePlayer.isCollidedHorizontally) event.setBounds(null);
    });
    @EventHandler
    private final Listener<PushOutOfBlocksEvent> pushOutOfBlocksListener = new Listener<>(PushOutOfBlocksEvent::cancel);

    @Override
    public void init() {
        super.init();
        addValueChangeListener(modeProperty);
    }

    private enum PhaseMode {
        HYPIXEL
    }

}
