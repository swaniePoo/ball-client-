package me.dinozoid.strife.module.implementations.exploit;

import me.dinozoid.strife.alpine.listener.EventHandler;
import me.dinozoid.strife.alpine.listener.Listener;
import me.dinozoid.strife.event.implementations.network.PacketOutboundEvent;
import me.dinozoid.strife.module.Category;
import me.dinozoid.strife.module.Module;
import me.dinozoid.strife.module.ModuleInfo;
import me.dinozoid.strife.property.Property;
import me.dinozoid.strife.property.implementations.EnumProperty;
import me.dinozoid.strife.util.network.PacketUtil;
import net.minecraft.network.play.client.C01PacketChatMessage;
import org.apache.commons.lang3.RandomUtils;

@ModuleInfo(name = "ChatBypass", renderName = "ChatBypass", aliases = "ChatFilter", description = "Bypass chat filters on servers.", category = Category.EXPLOIT)
public class ChatBypassModule extends Module {

    private final EnumProperty<ChatBypassMode> modeProperty = new EnumProperty("Mode", ChatBypassMode.UNICODE);

    private final Property<Boolean> commandsProperty = new Property<>("Commands", true);
    @EventHandler
    private final Listener<PacketOutboundEvent> packetOutboundListener = new Listener<>(event -> {
        if (event.getPacket() instanceof C01PacketChatMessage) {
            C01PacketChatMessage packet = event.getPacket();
            if (packet.getMessage() != null || packet.getMessage().startsWith("/") && commandsProperty.getValue()) return;
            event.cancel();
            StringBuilder sb = new StringBuilder();
            switch (modeProperty.getValue()) {
                case INVISIBLE: {
                    for (char character : packet.getMessage().toCharArray()) {
                        if (character == ' ') sb.append(" ");
                        else {
                            char[] chars = new char[]{'\u26DF', '\u26E0', '\u26E1', '\u26E2', '\u26E3', '\u26E4', '\u2753', '\u2E3B', '\u0fd8'};
                            sb.append(character).append(chars[RandomUtils.nextInt(0, chars.length - 1)]);
                        }
                    }
                    break;
                }
                case UNICODE: {
                    for (char character : packet.getMessage().toCharArray()) {
                        if (character == ' ') sb.append(" ");
                        else sb.append(Character.toChars(character + 65248));
                    }
                    break;
                }
                case DELIMITER: {
                    int index = 0;
                    for (char character : packet.getMessage().toCharArray()) {
                        if (index > 0) sb.append('\u02CC');
                        sb.append(character);
                        index++;
                    }
                    break;
                }
            }
            PacketUtil.sendPacketNoEvent(new C01PacketChatMessage(sb.toString()));
        }
    });

    @Override
    public void init() {
        super.init();
        addValueChangeListener(modeProperty);
    }

    private enum ChatBypassMode {
        UNICODE, DELIMITER, INVISIBLE
    }

}
